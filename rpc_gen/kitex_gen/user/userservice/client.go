// Code generated by Kitex v0.9.1. DO NOT EDIT.

package userservice

import (
	"context"
	user "github.com/SGNYYYY/gomall/rpc_gen/kitex_gen/user"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	Register(ctx context.Context, Req *user.RegisterReq, callOptions ...callopt.Option) (r *user.RegisterResp, err error)
	Login(ctx context.Context, Req *user.LoginReq, callOptions ...callopt.Option) (r *user.LoginResp, err error)
	DeleteUser(ctx context.Context, Req *user.DeleteUserReq, callOptions ...callopt.Option) (r *user.DeleteUserResp, err error)
	UpdatePassword(ctx context.Context, Req *user.UpdatePasswordReq, callOptions ...callopt.Option) (r *user.UpdatePasswordResp, err error)
	AdminUpdatePassword(ctx context.Context, Req *user.AdminUpdatePasswordReq, callOptions ...callopt.Option) (r *user.AdminUpdatePasswordResp, err error)
	AdminUpdateRole(ctx context.Context, Req *user.AdminUpdateRoleReq, callOptions ...callopt.Option) (r *user.AdminUpdateRoleResp, err error)
	Activate(ctx context.Context, Req *user.ActivateUserReq, callOptions ...callopt.Option) (r *user.ActivateUserResp, err error)
	Deactivate(ctx context.Context, Req *user.DeactivateUserReq, callOptions ...callopt.Option) (r *user.DeactivateUserResp, err error)
	GetUserInfo(ctx context.Context, Req *user.GetUserInfoReq, callOptions ...callopt.Option) (r *user.GetUserInfoResp, err error)
	GetUsers(ctx context.Context, Req *user.GetUsersReq, callOptions ...callopt.Option) (r *user.GetUsersResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kUserServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kUserServiceClient struct {
	*kClient
}

func (p *kUserServiceClient) Register(ctx context.Context, Req *user.RegisterReq, callOptions ...callopt.Option) (r *user.RegisterResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Register(ctx, Req)
}

func (p *kUserServiceClient) Login(ctx context.Context, Req *user.LoginReq, callOptions ...callopt.Option) (r *user.LoginResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Login(ctx, Req)
}

func (p *kUserServiceClient) DeleteUser(ctx context.Context, Req *user.DeleteUserReq, callOptions ...callopt.Option) (r *user.DeleteUserResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteUser(ctx, Req)
}

func (p *kUserServiceClient) UpdatePassword(ctx context.Context, Req *user.UpdatePasswordReq, callOptions ...callopt.Option) (r *user.UpdatePasswordResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdatePassword(ctx, Req)
}

func (p *kUserServiceClient) AdminUpdatePassword(ctx context.Context, Req *user.AdminUpdatePasswordReq, callOptions ...callopt.Option) (r *user.AdminUpdatePasswordResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AdminUpdatePassword(ctx, Req)
}

func (p *kUserServiceClient) AdminUpdateRole(ctx context.Context, Req *user.AdminUpdateRoleReq, callOptions ...callopt.Option) (r *user.AdminUpdateRoleResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AdminUpdateRole(ctx, Req)
}

func (p *kUserServiceClient) Activate(ctx context.Context, Req *user.ActivateUserReq, callOptions ...callopt.Option) (r *user.ActivateUserResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Activate(ctx, Req)
}

func (p *kUserServiceClient) Deactivate(ctx context.Context, Req *user.DeactivateUserReq, callOptions ...callopt.Option) (r *user.DeactivateUserResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Deactivate(ctx, Req)
}

func (p *kUserServiceClient) GetUserInfo(ctx context.Context, Req *user.GetUserInfoReq, callOptions ...callopt.Option) (r *user.GetUserInfoResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetUserInfo(ctx, Req)
}

func (p *kUserServiceClient) GetUsers(ctx context.Context, Req *user.GetUsersReq, callOptions ...callopt.Option) (r *user.GetUsersResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetUsers(ctx, Req)
}
